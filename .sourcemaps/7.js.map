{"version":3,"sources":["../../src/pages/login/login.module.ts","../../src/pages/login/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACa;AACN;AAEZ;AAcpC,IAAa,eAAe;IAA5B;IAA+B,CAAC;IAAD,sBAAC;AAAD,CAAC;AAAnB,eAAe;IAZ3B,uEAAQ,CAAC;QACR,YAAY,EAAE;YACZ,yDAAS;SACV;QACD,OAAO,EAAE;YACP,sEAAe,CAAC,QAAQ,CAAC,yDAAS,CAAC;YACnC,4EAAe,CAAC,QAAQ,EAAE;SAC3B;QACD,OAAO,EAAE;YACP,yDAAS;SACV;KACF,CAAC;GACW,eAAe,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;AClBc;AACa;AACQ;AACR;AACd;AAEQ;AAQjD,IAAa,SAAS;IAYrB,mBAAmB,OAAsB,EACjC,IAAU,EACV,SAA0B,EAC1B,gBAAkC,EACjC,UAAsB,EACvB,QAAkB;QAL1B,iBAyBC;QAzBkB,YAAO,GAAP,OAAO,CAAe;QACjC,SAAI,GAAJ,IAAI,CAAM;QACV,cAAS,GAAT,SAAS,CAAiB;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;QACjC,eAAU,GAAV,UAAU,CAAY;QACvB,aAAQ,GAAR,QAAQ,CAAU;QAhB1B,yCAAyC;QACzC,iEAAiE;QACjE,6BAA6B;QAC7B,YAAO,GAAwC;YAC9C,KAAK,EAAE,kBAAkB;YACzB,QAAQ,EAAE,MAAM;SAChB,CAAC;QAYD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,KAAK;YACxD,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC/B,CAAC,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;aACpB,IAAI,CAAC;YACL,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1B,KAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC;iBACjC,IAAI,CAAC,cAAI;gBACT,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3C,CAAC,CAAC;iBACD,KAAK,CAAC,aAAG;gBACT,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;aACD,KAAK,CAAC,aAAG;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC;IACH,CAAC;IAED,+CAA+C;IAC/C,2BAAO,GAAP;QAEC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAElC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;aACxB,IAAI,CAAC,cAAI;YACT,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC;aACD,KAAK,CAAC,aAAG;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH;;;;;;;;;;;aAWK;IACN,CAAC;IACF,gBAAC;AAAD,CAAC;AAjEY,SAAS;IAJrB,wEAAS,CAAC;QACV,QAAQ,EAAE,YAAY;OACG;KACzB,CAAC;2EAawC;QAC3B,sEAAI;QACC,6EAAe;QACR,8EAAgB;QACrB,iEAAU;QACb,MAAQ;AAgD1B;SAjEY,SAAS,e","file":"7.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IonicPageModule } from 'ionic-angular';\n\nimport { LoginPage } from './login';\n\n@NgModule({\n  declarations: [\n    LoginPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(LoginPage),\n    TranslateModule.forChild()\n  ],\n  exports: [\n    LoginPage\n  ]\n})\nexport class LoginPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.module.ts","import { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IonicPage, NavController, ToastController } from 'ionic-angular';\nimport { GooglePlus } from '@ionic-native/google-plus';\nimport { Platform } from 'ionic-angular';\n\nimport { User } from '../../providers/providers';\nimport { MainPage } from '../pages';\n\n@IonicPage()\n@Component({\n\tselector: 'page-login',\n\ttemplateUrl: 'login.html'\n})\nexport class LoginPage {\n\t// The account fields for the login form.\n\t// If you're using the username field with or without email, make\n\t// sure to add it to the type\n\taccount: { email: string, password: string } = {\n\t\temail: 'test@example.com',\n\t\tpassword: 'test'\n\t};\n\n\t// Our translated text strings\n\tprivate loginErrorString: string;\n\n\tconstructor(public navCtrl: NavController,\n\t\tpublic user: User,\n\t\tpublic toastCtrl: ToastController,\n\t\tpublic translateService: TranslateService,\n\t\tprivate googlePlus: GooglePlus,\n\t\tpublic platform: Platform) {\n\n\t\tthis.translateService.get('LOGIN_ERROR').subscribe((value) => {\n\t\t\tthis.loginErrorString = value;\n\t\t})\n\n\t\tthis.platform.ready()\n\t\t.then(() => {\n\t\t\tconsole.log(\"Ready!!!!!\");\n\t\t\tthis.googlePlus.trySilentLogin({})\n\t\t\t.then(user => {\n\t\t\t\tconsole.log(\"user\", JSON.stringify(user));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(\"err\", err);\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(\"err\", err);\n\t\t})\n\t}\n\n\t// Attempt to login in through our User service\n\tdoLogin() {\n\n\t\tconsole.log(\"Do Login By Google\");\n\n\t\tthis.googlePlus.login({})\n\t\t.then(user => {\n\t\t\tconsole.log(\"user\", user);\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(\"err\", err);\n\t\t});\n\n\t\t/*this.user.login(this.account).subscribe((resp) => {\n\t\t  this.navCtrl.push(MainPage);\n\t\t}, (err) => {\n\t\t  this.navCtrl.push(MainPage);\n\t\t  // Unable to log in\n\t\t  let toast = this.toastCtrl.create({\n\t\t\tmessage: this.loginErrorString,\n\t\t\tduration: 3000,\n\t\t\tposition: 'top'\n\t\t  });\n\t\t  toast.present();\n\t\t});*/\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts"],"sourceRoot":""}